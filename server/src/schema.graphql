type Query {
	messages(
		filter: String
		orderBy: MessageOrderByInput
		skip: Int
		take: Int
	): Messages!
}

type Messages {
	messageList: [Message!]!
	count: Int!
}

type Message {
	id: ID!
	text: String!
	created_at: String!
	likes: Int!
	dislikes: Int!
	responses: [Response!]!
}

type Response {
	id: ID!
	text: String!
	created_at: String!
	likes: Int!
	dislikes: Int!
	message: Message!
	messageId: ID!
}

input MessageInput {
	text: String!
}

input ResponseInput {
	text: String!
	messageId: ID!
}

enum Sort {
	asc
	desc
}

input MessageOrderByInput {
	created_at: Sort
	likes: Sort
	dislikes: Sort
}

type Mutation {
	createMessage(message: MessageInput!): Message!
	updateLikeAmount(id: ID!, amount: Int!): Message!
	updateDislikeAmount(id: ID!, amount: Int!): Message!
	createResponse(response: ResponseInput!): Response!
	updateResponseLikeAmount(id: ID!, amount: Int!): Response!
	updateResponseDislikeAmount(id: ID!, amount: Int!): Response!
}

type Subscription {
	newMessage: Message!
	newResponse: Response!
	messageRate: Message!
	responseRate: Response!
}
